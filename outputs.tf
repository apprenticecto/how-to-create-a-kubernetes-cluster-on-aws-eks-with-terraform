# IAM Admin creation outputs
output "this_iam_user_name" {
  description = "The user's name"
  value       = module.iam_user_login_access_key.this_iam_user_name
}

output "this_iam_user_arn" {
  description = "The ARN assigned by AWS for this user"
  value       = module.iam_user_login_access_key.this_iam_user_arn
}

output "this_iam_user_unique_id" {
  description = "The unique ID assigned by AWS"
  value       = module.iam_user_login_access_key.this_iam_user_unique_id
}

output "this_iam_user_login_profile_key_fingerprint" {
  description = "The fingerprint of the PGP key used to encrypt the password"
  value       = module.iam_user_login_access_key.this_iam_user_login_profile_key_fingerprint
}

output "this_iam_user_login_profile_encrypted_password" {
  description = "The encrypted password, base64 encoded"
  value       = module.iam_user_login_access_key.this_iam_user_login_profile_encrypted_password
}

output "this_iam_access_key_id" {
  description = "The access key ID"
  value       = module.iam_user_login_access_key.this_iam_access_key_id
}

output "this_iam_access_key_key_fingerprint" {
  description = "The fingerprint of the PGP key used to encrypt the secret"
  value       = module.iam_user_login_access_key.this_iam_access_key_key_fingerprint
}

output "this_iam_access_key_encrypted_secret" {
  description = "The encrypted secret, base64 encoded"
  value       = module.iam_user_login_access_key.this_iam_access_key_encrypted_secret
}

output "this_iam_access_key_secret" {
  description = "The access key secret"
  value       = module.iam_user_login_access_key.this_iam_access_key_secret
}

output "this_iam_access_key_ses_smtp_password_v4" {
  description = "The secret access key converted into an SES SMTP password"
  value       = module.iam_user_login_access_key.this_iam_access_key_ses_smtp_password_v4
}

output "this_iam_access_key_status" {
  description = "Active or Inactive. Keys are initially active, but can be made inactive by other means."
  value       = module.iam_user_login_access_key.this_iam_access_key_status
}

output "pgp_key" {
  description = "PGP key used to encrypt sensitive data for this user (if empty - secrets are not encrypted)"
  value       = module.iam_user_login_access_key.pgp_key
}

output "keybase_password_decrypt_command" {
  description = "Decrypt user password command"
  value       = module.iam_user_login_access_key.keybase_password_decrypt_command
}

output "keybase_password_pgp_message" {
  description = "Encrypted password"
  value       = module.iam_user_login_access_key.keybase_password_pgp_message
}

output "keybase_secret_key_decrypt_command" {
  description = "Decrypt access secret key command"
  value       = module.iam_user_login_access_key.keybase_secret_key_decrypt_command
}

output "keybase_secret_key_pgp_message" {
  description = "Encrypted access secret key"
  value       = module.iam_user_login_access_key.keybase_secret_key_pgp_message
}

output "this_group_users" {
  description = "List of IAM users in IAM group"
  value       = module.iam_group_complete.this_group_users
}

output "this_assumable_roles" {
  description = "List of ARNs of IAM roles which members of IAM group can assume"
  value       = module.iam_group_complete.this_assumable_roles
}

output "this_policy_arn" {
  description = "Assume role policy ARN for IAM group"
  value       = module.iam_group_complete.this_policy_arn
}

# EKS outputs

output "cluster_id" {
  description = "EKS cluster ID."
  value       = module.eks.cluster_id
}

output "cluster_endpoint" {
  description = "Endpoint for EKS control plane."
  value       = module.eks.cluster_endpoint
}

output "cluster_security_group_id" {
  description = "Security group ids attached to the cluster control plane."
  value       = module.eks.cluster_security_group_id
}

output "kubectl_config" {
  description = "kubectl config as generated by the module."
  value       = module.eks.kubeconfig
}

output "config_map_aws_auth" {
  description = "A kubernetes configuration to authenticate to this EKS cluster."
  value       = module.eks.config_map_aws_auth
}

output "region" {
  description = "AWS region"
  value       = var.region
}

output "cluster_name" {
  description = "Kubernetes Cluster Name"
  value       = local.cluster_name
}
